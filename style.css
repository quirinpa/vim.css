/*gcc
#include "t.h"
#define T(_s) T_ ## _s

#define S(a) S_ ## a
#define S_ 16px
#define S_s 8px
#define S_xs 4px
#define S_l 32px
#define S_xl 64px

#define C(a) C_ ## a
#define C_white white
#define C_black black
#define C_pri $d1005d
#define C_sec $a5cd38
#define C_dark $030830
#define C_red $fc475e
#define C_dgrey $242a30
#define C_grey $a8aab8
#define C_lgrey $dadada
#define C_xlgrey $fafafa
#define C_purple $45425a
#define C_mystic $45425a
#define C_dblue $030830

#define H(a) H_ ## a
#define H_ 220px
#define H_l 250px
#define H_s 161px
#define H_xs 90px

#define IPH 12px
#define RP S_xl / PI
#define BH (S_xl + RP)

#define PI 3.1415

#define CALL(n, pre, ...) CALL_ ## n(pre, __VA_ARGS__)
#define CALL_1(pre, a) pre(a)
#define CALL_2(pre, a, ...) pre(a) CALL_1(pre, __VA_ARGS__)
#define CALL_3(pre, a, ...) pre(a) CALL_2(pre, __VA_ARGS__)
#define CALL_4(pre, a, ...) pre(a) CALL_3(pre, __VA_ARGS__)
#define CALL_5(pre, a, ...) pre(a) CALL_4(pre, __VA_ARGS__)
#define CALL_6(pre, a, ...) pre(a) CALL_5(pre, __VA_ARGS__)
#define CALL_7(pre, a, ...) pre(a) CALL_6(pre, __VA_ARGS__)
#define CALL_8(pre, a, ...) pre(a) CALL_7(pre, __VA_ARGS__)
#define CALL_9(pre, a, ...) pre(a) CALL_8(pre, __VA_ARGS__)
#define CALL_10(pre, a, ...) pre(a) CALL_9(pre, __VA_ARGS__)
#define CALL_11(pre, a, ...) pre(a) CALL_10(pre, __VA_ARGS__)
#define CALL_12(pre, a, ...) pre(a) CALL_11(pre, __VA_ARGS__)
#define CALL_13(pre, a, ...) pre(a) CALL_12(pre, __VA_ARGS__)
#define CALL_14(pre, a, ...) pre(a) CALL_13(pre, __VA_ARGS__)
#define CALL_15(pre, a, ...) pre(a) CALL_14(pre, __VA_ARGS__)
#define CALL_16(pre, a, ...) pre(a) CALL_15(pre, __VA_ARGS__)

#define TSIZE(_ts) \
	 .t ## _ts { font-size: T(_ts); }

#define WRAP(_s) \
	.w ## _s { \
		display: flex; \
		flex-wrap: wrap; margin-right: calc(S(_s) * -1); \
		margin-bottom: calc(S(_s) * -1); \
	} \
	.w ## _s > * { margin-bottom: S(_s); margin-right: S(_s); }

#define HORIZONTAL(_s) \
	.h ## _s > * { margin-left: S(_s); display: inline-block; } \
	.h ## _s > :first-child { margin-left: 0; }

#define VERTICAL(_s) \
	.v ## _s > * { margin-top: S(_s); display: block } \
	.v ## _s > :first-child { margin-top: 0; }

#define TABLE_VERTICAL(_s) \
	table.v ## _s { border-spacing: 0 S(_s); border-collapse: separate; } \
	table.v ## _s > * { margin_top: 0; }

#define FLEX_VERTICAL(_s) \
	.v ## _s.f { flex-direction: column; }

#define SPLIT_HORIZONTAL(_s) \
	.x.h ## _s { overflow: hidden; } \
	.x.h ## _s > * { display: block; float: left; width: calc(50% - S(_s) / 2); } \
	.x.h ## _s > input { width: calc(50% - 2 * IPH - S(_s) / 2 - 2px); }

#define PADDING(_s) \
	.p ## _s { padding: S(_s); } \
	.p ## _s > .W { width: calc(100% - 2 * S(_s)); }

#define SIZE(_s) \
	.s ## _s { height: S(_s); width:S(_s); } \
	.sv ## _s { height: S(_s); } \
	.sh ## _s { width: S(_s); } \
	.st ## _s { line-height: S(_s); }

#define TABLE_PADDING(_s) \
	table.P ## _s > tbody > tr > td { padding: calc(S(_s) / 2); } \
	table.P ## _s th { padding-top: calc(S(_s) / 2); padding-bottom: calc(S(_s) / 2); } \
	table.P ## _s > tbody > tr > td:first-child { padding-left: S(_s); } \
	table.P ## _s > tbody > tr > td:last-child { padding-right: S(_s); } \
	table.P ## _s > tbody > tr > td { padding: S(_s) calc(S(_s) / 2); }

#define FIXED_MAIN(_s) min-height: calc(100vh - H(_s)); margin-top: H(_s);
#define FIXED(_s) \
	.F._ ## _s header { height: H(_s); } \
	.F._ ## _s main { FIXED_MAIN(_s); }

#define COLOR(name) \
	.c ## name { background-color: C(name); color: white; } \
	.C ## name { color: C(name); }

#define CENTER_ABS_V(_s) \
	.abs.s ## _s, .abs.sv ## _s { top: calc(50% - S(_s) / 2); }

#define ABS_PADDING(_s) \
	.p ## _s > .abs.H { left: S(_s); } \
	.p ## _s > .abs.J { bottom: S(_s); } \
	.p ## _s > .abs.K { top: S(_s); } \
	.p ## _s > .abs.L { right: S(_s); }

*/

/* #define FW_PADDING(_s) \ */
/* .p > .fw { width: calc(100% - 2 * S(_s)); } */
:root {
	--Txs: T_xs;
	--Ts: T_s;
	--T: T_;
	--Tml: T_ml;
	--Tl: T_l;
	--Txl: T_xl;
	--Txxl: T_xxl;
	--TXl: T_Xl;

	--S: S_;
	--Ss: S_s;
	--Sxs: S_xs;
	--Sl: S_l;
	--Sxl: S_xl;

	--Cwhite: C_white;
	--Cblack: C_black;
	--Cpri: C_pri;
	--Csec: C_sec;
	--Cdark: C_dark;
	--Cdgrey: C_dgrey;
	--Cgrey: C_grey;
	--Clgrey: C_lgrey;
	--Cxlgrey: C_xlgrey;
	--Cred: C_red;
	--Cpurple: C_purple;
	--Cmystic: C_mystic;
	--Cdblue: C_dblue;

	--H: H_;
	--Hs: H_s;
	--Hxs: H_xs;
	--Hl: H_l;
}

.W { width: 100%; }

.tal { text-align: left; }
.tac { text-align: center; }
.tar { text-align: right; }
.tuc { text-transform: uppercase; }
.tb { font-weight: bold; }
.tnow { white-space: nowrap; }
/*gcc
CALL_8(TSIZE, xs, s,  , ml, l, xl, xxl, Xl)
*/

.c > * { vertical-align: middle; }
.f.c { align-items: center; }

.f { display: flex !important; }
.fg { flex-grow: 1; }
.fg- { flex-grow: 0 !important; }
.fgc > * { flex-grow: 1; }

.rel { position: relative; }
.abs { position: absolute; }
.abs.cv { top: 50%; }
.abs.H { left: 0; }
.abs.J { bottom: 0; }
.abs.K { top: 0; }
.abs.L { right: 0; }

.tcv {
	display: inline-flex !important;
	flex-direction: column;
	justify-content: center;
	text-align: center;
}

.round {
	text-align: center;
	border-radius: 50%;
	padding: 9px;
	display: inline-flex;
}

.round.char {
	display: inline-block;
	min-width: 1rem;
	min-height: 1rem;
	line-height: 1rem;
	vertical-align: middle;
	padding: 5px;
}

.F { background-color: C_pri; }
.F header {
	height: H_;
	position: fixed;
	top: 0;
	z-index: 2;
	background-color: C_pri;
}
.F main {
	FIXED_MAIN();
	padding: calc(RP);
	padding-top: calc(S_xl);
	padding-bottom: calc(BH + RP);
	border-radius: S_xl 0 0;
}
.F main, .F header { width: 100%; }

label > input, label > textarea { display: block; }

.fw input, .fw select, .fw textarea { width: 100%; }
.fw input { width: calc(100% - 2 * IPH - 2px); }
input, textarea { padding-left: 6px IPH; }

/*gcc
#define SIZE_ALL(_s) \
	HORIZONTAL(_s) VERTICAL(_s) FLEX_VERTICAL(_s) \
	SIZE(_s)

CALL_2(PADDING, xl, )
CALL_2(TABLE_PADDING, s, )
CALL_4(FIXED, s, xs, l, )
CALL_2(CENTER_ABS_V, l, )
CALL_2(ABS_PADDING, xl, )
CALL_6(SIZE_ALL, s, xs, xxs, l, xl, )

CALL_12(COLOR, pri, dark, sec, white, black, dgrey, grey, lgrey, xlgrey, red, purple, mystic)
*/

/* .abs { margin-top: 0 !important; } */
main > .abs.J { bottom: var(--S); }
/* .F._xs header.p .m._N.svl { margin-top: calc(H_xs -  2 * S_ - S_l); } */
input, textarea { color: C_black; }
